package edu.seminolestate.manageparts;


/*
 * Nick Wetherington
 * 06/22/2021
 * Ch 11 Project (Ver 1)
 * The purpose of this assignment is to use inheritance, overridden methods, and polymorphism. 
 * In this application you will create a hierarchy of classes modeling a company that produces and sells parts
 */


import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Scanner;

public class ManageParts {

	private static Scanner keyboard; //Use a Scanner object for all user input.
	private static final int ADD_PURCHASED_PART = 1;
	private static final int ADD_MANUFACTURED_PART = 2;
	private static final int LIST_ONE_PART = 3;
	private static final int LIST_ALL_PARTS = 4;
	private static final int EXIT = 5;
	
	public static ArrayList<Part> parts = new ArrayList<>();
	
	public static void main(String [] args)	{
				
		keyboard = new Scanner(System.in); //***** Use a Scanner object for all user input.
	   int partID;
	   String partDescription;
	   double partSellPrice;
	   double laborCost;//cost to make part 
	   double materialCost;//amount of material in product
	   double purchasePrice; //what does this part cost to buy?
	   String vendor;  //who do we buy this part from?
	   double handlingCost; //shipping and handling costs when we buy it
	   	
	   int userChoice = 0; //main loop control variable
	   
	    while (userChoice != EXIT)	{
			userChoice = getUserChoice();
			
			switch (userChoice)
			{
				case ADD_PURCHASED_PART:
					/*
					 * Create a PurchasedPart object if the user enters menu option 1. Get the data for 
					 * the object from the user using a Scanner object. Prompt the user to enter 
					 * each piece of data (id, description, sell price, purchase price, vendor, and 
					 * handling cost). Use this data to create the object. Store the object in the ArrayList.
					 */
					
					/*
					 * int partID;
	   
					 */
					partID = getUniquePartId(parts);
					partDescription = getString("Enter a description");
					partSellPrice = getDouble("Enter a sell price");
					purchasePrice = getDouble("Enter a purchase price");
					handlingCost = getDouble("Enter the handling cost");
					vendor = getString("Enter the vendor name");
					
					PurchasedPart pp = 
							new PurchasedPart(partID, partDescription, partSellPrice, purchasePrice, vendor, handlingCost);
					parts.add(pp);
					System.out.println(parts);
					break;
					
				case ADD_MANUFACTURED_PART:
					
					partID = getUniquePartId(parts);
					partDescription = getString("Enter a description");
					partSellPrice = getDouble("Enter a sell price");
					purchasePrice = getDouble("Enter a purchase price");
					handlingCost = getDouble("Enter the handling cost");
					vendor = getString("Enter the vendor name");
					
					ManufacturedPart mp = 
							new ManufacturedPart(partID, partDescription, partSellPrice, laborCost, materialCost);
					parts.add(mp);
					System.out.println(parts);
					break;
					
				case LIST_ONE_PART:
					// call user to enter partID
					//display part with toString
					
				case LIST_ALL_PARTS:
					//Display all list of parts with toString
					
				case EXIT:
					System.out.println("Thanks for using the parts manager!");
					keyboard.close();
					break;
			}
		} //end while
	} // end main
		
	public static void displayOnePart(ArrayList<Part> parts) {
	NumberFormat currFormatter = NumberFormat.getCurrencyInstance();
	int searchID = getInteger("Enter a part ID");
	boolean isFound = false;
	//Search the ArrayList for a 'part' with an ID that matches 
	//the ID entered by the user
	for (Part part : parts) {
		if (part.getPartID() == searchID){
			System.out.println(part +
					"\nPart cost:" + currFormatter.format(part.getTotalCost()));
			isFound = true;//update loop control variable so loop will stop
		}
	}
	if (! isFound){
		System.out.println(searchID + " was not found");
	}
}
	

	private static int getUniquePartId(ArrayList<Part> parts) {
	// TODO Auto-generated method stub
		return null;
	}

	private static double getDouble(String string) {
		// TODO Auto-generated method stub
		return 0;
	}

	private static String getString(String string) {
//		// TODO Auto-generated method stub
		return null;
	}//end main

		
		public static int getUniquePartId(ArrayList<Part> parts){
			int userInt=0;
			String userValue;
			do {
				System.out.println("Enter parts ID ");
				userValue = keyboard.nextLine();
				userInt = Integer.parseInt(userValue);
				if (userInt <= 0) {
					System.out.println("Value must be > 0. Please reenter.");
				}
			} while (userInt <= 0);

			return userInt;
		}
		
		public static  String getString(String prompt){

			System.out.println(prompt);
			String	userValue = keyboard.nextLine();
			
			return userValue;
		}

	public static double getDouble(String prompt){
		double userDouble = 0;
		do {
			System.out.println(prompt);
			String userValue = keyboard.nextLine();
			userDouble =  Double.parseDouble(userValue);
			if (userDouble < 0) {
				System.out.println("Value must be >= 0. Please reenter.");
			}
		} while (userDouble < 0);
		
		return userDouble;
	}
	private static int getUserChoice() {
// TODO Auto-generated method stub
	return 0;
}

	public static int getInteger(String prompt){
		int userInt = 0;
		do {
			System.out.println(prompt);
			String userValue = keyboard.nextLine();
			userInt = Integer.parseInt(userValue);
			if (userInt <= 0) {
				System.out.println("Value must be > 0. Please reenter.");
			}
		} while (userInt <= 0);

		return userInt;
	}
//		
		public static int getUserChoice()
		{
			int userResponse = 0;
			
			/*
			 * Redisplay the menu if an invalid value (not 1 through 6) is 
			 * entered and continue the application.
			 */
			String userInput;
			do 
			{
				/*
				 * Create a main method in the ManageParts  class. Display the menu below 
				 * when the application starts. Redisplay the menu if an invalid value  
				 * is entered and continue the application.
						1.	Create Purchased Part
						2.	Create Manufactured Part
						3.	List a part
						4.	List all parts
						5.	Exit
				 */
				System.out.println("Enter your choice: ");
				System.out.println(ADD_PURCHASED_PART + ". Create Purchased Part ");
				System.out.println(ADD_MANUFACTURED_PART + ". Create Manufactured Part");
				System.out.println(LIST_ONE_PART + ". List a part");
				System.out.println(LIST_ALL_PARTS + ". List all parts");
				System.out.println(EXIT + ". Exit");
				userInput = keyboard.nextLine();
				//userInput = keyboard.nextInt();
				if (userInput == null || userInput.equals("")) {
					return 99;
				}
	userResponse = Integer.parseInt(userInput);
				//userResponse = userInput;
				if (userResponse < ADD_PURCHASED_PART || userResponse > EXIT){
					System.out.println("Invalid value. Enter a value " + ADD_PURCHASED_PART + " - " + EXIT);
				}
			} while (userResponse < ADD_PURCHASED_PART || userResponse > EXIT);
			return userResponse;
		}
	
} // end of class ManageParts
